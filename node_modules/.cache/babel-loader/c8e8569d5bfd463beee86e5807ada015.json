{"ast":null,"code":"import _slicedToArray from\"/Users/damien/Documents/Sinf/myapp/react-to-do/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import db from'./firebase';import React,{useState,useEffect}from'react';import Todo from'./Todo';import{Button,FormControl,Input,InputLabel}from'@material-ui/core';import'./App.css';import firebase from'firebase';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),todos=_useState2[0],setTodos=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),input=_useState4[0],setInput=_useState4[1];useEffect(function(){//fires when the app loads\ndb.collection('todos').orderBy('timestamp','desc').onSnapshot(function(snapshot){//when something change in the database\nsetTodos(snapshot.docs.map(function(doc){return doc.data().todo;}));//return a flat array of strings\n});},[]);var addTodo=function addTodo(event){event.preventDefault();//stop the refresh\ndb.collection('todos').add({todo:input,timestamp:firebase.firestore.FieldValue.serverTimestamp()});//setTodos([...todos, input]) //copy the entire array of todo and append\nsetInput('');};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\" My To-Do App \"}),/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsxs(FormControl,{children:[/*#__PURE__*/_jsx(InputLabel,{children:\" Write a Todo \"}),/*#__PURE__*/_jsx(Input,{value:input,onChange:function onChange(event){return setInput(event.target.value);}})]}),/*#__PURE__*/_jsx(Button,{disabled:!input,variant:\"contained\",color:\"primary\",type:\"submit\",onClick:addTodo,children:\"Add Todo\"})]}),/*#__PURE__*/_jsx(\"ul\",{children:todos.map(function(todo){return/*#__PURE__*/_jsx(Todo,{text:todo});})})]});}export default App;","map":{"version":3,"sources":["/Users/damien/Documents/Sinf/myapp/react-to-do/src/App.js"],"names":["db","React","useState","useEffect","Todo","Button","FormControl","Input","InputLabel","firebase","App","todos","setTodos","input","setInput","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","todo","addTodo","event","preventDefault","add","timestamp","firestore","FieldValue","serverTimestamp","target","value"],"mappings":"qKAAA,MAAOA,CAAAA,EAAP,KAAe,YAAf,CACA,MAAOC,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,CAEA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CAEA,OAASC,MAAT,CAAkBC,WAAlB,CAA+BC,KAA/B,CAAsCC,UAAtC,KAAuD,mBAAvD,CACA,MAAO,WAAP,CAEA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,C,wFAGA,QAASC,CAAAA,GAAT,EAAe,eACaR,QAAQ,CAAC,EAAD,CADrB,wCACNS,KADM,eACCC,QADD,8BAEaV,QAAQ,CAAC,EAAD,CAFrB,yCAENW,KAFM,eAECC,QAFD,eAIbX,SAAS,CAAC,UAAM,CACd;AACAH,EAAE,CAACe,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B,WAA/B,CAA4C,MAA5C,EAAoDC,UAApD,CAA+D,SAAAC,QAAQ,CAAI,CAAE;AAC3EN,QAAQ,CAACM,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkB,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,GAAWC,IAAf,EAArB,CAAD,CAAR,CAAoD;AACrD,CAFD,EAGD,CALQ,CAKN,EALM,CAAT,CAOA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAW,CACzBA,KAAK,CAACC,cAAN,GAAwB;AACxB1B,EAAE,CAACe,UAAH,CAAc,OAAd,EAAuBY,GAAvB,CAA2B,CACzBJ,IAAI,CAAEV,KADmB,CAEzBe,SAAS,CAAGnB,QAAQ,CAACoB,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B,EAFa,CAA3B,EAIA;AACAjB,QAAQ,CAAC,EAAD,CAAR,CACD,CARD,CAUA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,sCADF,cAGE,qCACE,MAAC,WAAD,yBACE,KAAC,UAAD,6BADF,cAEE,KAAC,KAAD,EAAO,KAAK,CAAID,KAAhB,CAAuB,QAAQ,CAAI,kBAAAY,KAAK,QAAIX,CAAAA,QAAQ,CAACW,KAAK,CAACO,MAAN,CAAaC,KAAd,CAAZ,EAAxC,EAFF,GADF,cAME,KAAC,MAAD,EAAQ,QAAQ,CAAI,CAACpB,KAArB,CAA4B,OAAO,CAAC,WAApC,CAAgD,KAAK,CAAC,SAAtD,CAAgE,IAAI,CAAG,QAAvE,CAAgF,OAAO,CAAIW,OAA3F,sBANF,GAHF,cAcE,oBACGb,KAAK,CAACS,GAAN,CAAU,SAAAG,IAAI,qBACb,KAAC,IAAD,EAAM,IAAI,CAAIA,IAAd,EADa,EAAd,CADH,EAdF,GADF,CAuBD,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import db from './firebase';\nimport React, {useState, useEffect} from 'react';\n\nimport Todo from './Todo';\n\nimport { Button , FormControl, Input, InputLabel} from '@material-ui/core';\nimport './App.css';\n\nimport firebase from 'firebase';\n\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    //fires when the app loads\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => { //when something change in the database\n      setTodos(snapshot.docs.map(doc => doc.data().todo)) //return a flat array of strings\n    })\n  }, []);\n\n  const addTodo = (event) => {\n    event.preventDefault(); //stop the refresh\n    db.collection('todos').add({\n      todo: input,\n      timestamp : firebase.firestore.FieldValue.serverTimestamp()\n    })\n    //setTodos([...todos, input]) //copy the entire array of todo and append\n    setInput('');\n  }\n\n  return (\n    <div className=\"App\">\n      <h1> My To-Do App </h1>\n\n      <form>\n        <FormControl>\n          <InputLabel> Write a Todo </InputLabel>\n          <Input value = {input} onChange = {event => setInput(event.target.value)} />\n        </FormControl>\n\n        <Button disabled = {!input} variant=\"contained\" color=\"primary\" type = \"submit\" onClick = {addTodo} >\n          Add Todo\n        </Button>\n      </form>\n\n      <ul>\n        {todos.map(todo => (\n          <Todo text = {todo}/>\n        ))}\n      </ul>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}